Git y github
Stagin

Area en memoria ram, completamente aislada, funciona en memoria ram y es donde al principio se guardarán los cambios y se crea el repositorio, una vez se hacen los cambios en el archivo se envía al stagin con el comando git add

TRABAJANDO CON UN REPO LOCAL
	
git init → iniciando el entorno github
git add → Agrega los cambios al stagin para trackearlo
git commit -m "mensaje" → enviar al repositorio los cambios almacenados en sagin, cada commit es una nueva versión de cambios del archivo hacia el repositorio
git checkout → traer los cambios desde el repositorio hacia la carpeta 
git status --> ver el estado de mis archivos
git rm --force --> Elimina los archivos de Git y del disco duro
git rm --cached --> remover un archivo del staging y del proximo commit pero los mantiene en disco duro  
git config --> configurar git 
git config --list --> las configuraciones que tiene y las cosas que le faltan
git log --> ver el historial de cambios recibe el nombre de archivo como parametro
git show --> muestra una serie de cambios realizados al archivo, parametro (nombre del archivo)
git checkout # --> me muestra la versión que to le indique en el # de versión

RAMAS
git branch --> ver las ramas existentes
git branch nameBranch --> crear rama, parametro nombre
git merge --> fusionar las ramas 

TRABAJANDO CON UN REPO REMETO

git clone url --> Se trae un proyecto de github a mi repo local y crea la base de todos los cambios historicos en el repositorio local
git push -->  envia los cambios y los archivos guardados en el repositorio local al repositorio remoto
git fetch --> Trae los cambios del repositorio remoto al repositorio local pero no lo copia en los archivos, para que eso pase debo fusionar la version del repositorio local con el directorio de trabajo, a eso se le llama un merge
git pull --> Trae los cambios del repositorio remoto al repositorio locar y al directorio de trabajo

git remote add origin + dirección del repositorio --> Decirle a git que vamos a agregar un origen remoto de nuestros archivos
git pull origin master --> enviar archivos de repositorio local a remoto
git pull origin master --allow-unrelated-histories
git remote --> me muestra el origen
git remote -v --> me muestra exactamente la direccion de origen




Branch o Ramas
Dividir el archivo en secciones o ramas, a cada seccion se le llama rama y va a tener un nombre, la rama principal por defecto es master.

Hotfix: nombre en la industria de la rama de arreglo en caliente, crear una nueva rama para arreglar un bug
Development: Nombre en la industria de la rama de pruebas 
Merge: Unir los cambios de una rama con otra

>PROTOCOLOS DE SEGURIDAD

Cifrado Asimetrico de un solo camino: llaves publicas y llaves privadas
SSH (Secure SHell): Protocolo para conectar de manera segura mi repositorio local con mi repositorio remoto

Mis primeros cambios desde GitHub ...

> CREAR SSH

ssh-keygen -t rsa -b 4096 -C "email" --> generar llaves ssh
ssh-add ruta/id_rsa --> activar llaves en entorno local
git remote set-url origin urlssh  --> Cambiar la direccion de conexión con gitHub de https a dirección  SSH para conectar las llaves
origin --> nombre del master en repositorio remoto


> CREAR ALIAS y TAGS (VERSIONES)

	alias aliasName = "comando a guardar en el alias"

	git tag -a v0.1 -m "mensaje de la versión" #id_commit --> crear versiones 

	git show-ref --tags --> ver la lista de tags

	git push origin --tags --> enviar tags al repositorio remoto

	git tag -d nameDeleteTag --> eliminar un tag por su nombre
	
	git push origin :refs/tags/nameTagDelate --> borrar tags de gitHub	

> RAMAS locales y remotas
	git show branch --all --> ver el historíal de ramas
	gitk --> abre la historia en un software de manera ultravisual
    	git pull branchRepo branchName --> traer una rama del repositorio remoto al local
	git push branchRepo branchName --> enviar una rama del repo local al repo remoto
	git log --all --graph --decorate --oneline --> mostrar historial de cambios de manera grafia y resumida
	git branch -r --> ver las ramas remotas
	git branch -a --> ver todas las ramas, locales y remotas
	

> MULTIPLES COLABORADORES

	git clone url --> traer el repositorio remoto a mi repositorio local
	*Para dar los permisos a otros usuarios:
		- ir a settings en el repositorio remoto
		- ir a collaborators 
		- agregar colaboradores por su email(si es publico) o por su username

>BUENAS PRACTICAS
 	- En el master solo se envia lo que ya estoy seguro de que esta listo para producción
	- upstream --> nombre convencional de una rama a la que se le realizo un fork, 
			es el equivalente a un apuntador al repositorio maestro

>SERVIDORES DE DESARROLLO (STAGIN)

	pullrequest --> estado inrermedio antes de enviar el merge al stagin global
	DevOps --> Administrador del entorno de desarrollo

	Fork --> Tomar una copia del estado actual del proyecto y clonarlo unicamente en Github
	

>Haciendo deployment a un servidor
	
	integración continua:
	Tavis CI --> Pagina que conecta automaticamente mis ramas de github con mis servidores
	Jenkins --> Tambien permite automatizar la conexion entre github y servidores pero este se 
		instala en el equipo
	
> Ignorar archivos en el repositorio con .gitignore
	.gitignore --> archivo que se crea en la raiz del proyecto, en el cual se
	agregan los nombres de los archivos a ingnorar, ej, llaves o imagenes, archivos binarios
	entre otros.	

> Readme.md --> un archivo en formato mark down, tambien se le puede agregar html

	Editor.md --> editor para crear el archivo readme.md  
		https://pandao.github.io/editor.md/en.html


> git cherry-pick #commit --> Traer commits viejos al head de un branch.
				*Es una mala practica, pero puede ser usado en casos especiales

> git ammend --> Reconstruir un commid, sirve para poder añadir cambios a un commit ya hecho y 
		poder guardarlo sobre el mismo commit, sin necesidad de crar uno nuevo.


> EN CASO DE EMERGENCIA
	> git reflog --> muestra absolutamente todo el historial y los cambios
	> git reset #Commithash --> volver al commit indicado en el #hash
	
> BUSCAR EN ARCHIVOS Y COMMITS
	
	> git grep "palabra" --> buscar en que archivos usé la palbra
	> git grep -n "palabra" --> buscar la palabra, en que archivos la usé y el # de linea
	> git grep -c "palabra" --> contar la cantidad de veces que una palabra ocurre dentro de un archivo
	
	> git log -S "palabra" --> busca la palabra en el historial de commits

> Comandos y recursos colaborativos en Git y Github

	> git shortlog --> muestra cuantos commits ha hecho cada miembro del equipo
	> git shortlog -sn --> muestra las personas que han realizado commits y cuantos ha realizado
	> git shortlog -sn --all --> muestra todos los comits
	> git shortlog -sn --all --no-merges --> muestra la cantidad de commits por persona, pero sin contar los merges
	
	> git config --global alias.commandName "comando" --> Crear un comando global personalizado.
	
	> git blame -c fileName --> mostrar quien ha hecho que cambios en el archivo
	> git blame filename -L#line,#endLine --> ver quien hizo que cambios dentro de las lineas
						especificadas.	

> git comando --help --> ver como esta conformado internamente un comando 

> insights en github: ver las estadisticas de lo que se ha hecho en el repositorio remoto

 
